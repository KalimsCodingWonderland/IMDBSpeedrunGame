{"ast":null,"code":"var _jsxFileName = \"/Users/lucasperez/GitHub/IMDBSpeedrunGame/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './styles.css';\nimport MovieCardDeck from './MovieCardDeck';\nimport GraphPage from './GraphPage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentPage, setCurrentPage] = useState('home');\n  const [startMovie, setStartMovie] = useState('');\n  const [endMovie, setEndMovie] = useState('');\n  const [algorithm, setAlgorithm] = useState('dijkstra');\n  const [path, setPath] = useState(null);\n  const [fullPath, setFullPath] = useState([]);\n  const [processedMovies, setProcessedMovies] = useState([]);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [error, setError] = useState(null);\n  const searchMovies = async () => {\n    setIsProcessing(true);\n    try {\n      const res = await axios.get(`/find_path?start_id=${startMovieId}&end_id=${endMovieId}&algorithm=${algorithm}`);\n      setPath(res.data.path);\n      setFullPath(res.data.path.movies);\n      fetchProcessedMovies(); // Fetch processed movies in parallel\n    } catch (err) {\n      console.error(err);\n      setError('Failed to find path');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const fetchProcessedMovies = async () => {\n    try {\n      const res = await axios.get(`/get_processed_movies`);\n      setProcessedMovies(res.data.processed_movies);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: currentPage === 'home' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uD83C\\uDFAC Movie Path Finder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCurrentPage('graph'),\n        children: \"View Graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MovieCardDeck, {\n        movies: processedMovies\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(GraphPage, {\n      navigateHome: () => setCurrentPage('home'),\n      fullPath: fullPath,\n      processedMovies: processedMovies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Yq7xdvXgKQWrvAQRp/Nj0byLv0I=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","MovieCardDeck","GraphPage","jsxDEV","_jsxDEV","App","_s","currentPage","setCurrentPage","startMovie","setStartMovie","endMovie","setEndMovie","algorithm","setAlgorithm","path","setPath","fullPath","setFullPath","processedMovies","setProcessedMovies","isProcessing","setIsProcessing","error","setError","searchMovies","res","get","startMovieId","endMovieId","data","movies","fetchProcessedMovies","err","console","processed_movies","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","navigateHome","_c","$RefreshReg$"],"sources":["/Users/lucasperez/GitHub/IMDBSpeedrunGame/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './styles.css';\nimport MovieCardDeck from './MovieCardDeck';\nimport GraphPage from './GraphPage';\n\nfunction App() {\n  const [currentPage, setCurrentPage] = useState('home');\n  const [startMovie, setStartMovie] = useState('');\n  const [endMovie, setEndMovie] = useState('');\n  const [algorithm, setAlgorithm] = useState('dijkstra');\n  const [path, setPath] = useState(null);\n  const [fullPath, setFullPath] = useState([]);\n  const [processedMovies, setProcessedMovies] = useState([]);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [error, setError] = useState(null);\n\n  const searchMovies = async () => {\n    setIsProcessing(true);\n    try {\n      const res = await axios.get(`/find_path?start_id=${startMovieId}&end_id=${endMovieId}&algorithm=${algorithm}`);\n      setPath(res.data.path);\n      setFullPath(res.data.path.movies);\n      fetchProcessedMovies(); // Fetch processed movies in parallel\n    } catch (err) {\n      console.error(err);\n      setError('Failed to find path');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const fetchProcessedMovies = async () => {\n    try {\n      const res = await axios.get(`/get_processed_movies`);\n      setProcessedMovies(res.data.processed_movies);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <div>\n      {currentPage === 'home' ? (\n        <div>\n          <h1>ðŸŽ¬ Movie Path Finder</h1>\n          {/* Inputs, algorithm selection, and search button */}\n          <button onClick={() => setCurrentPage('graph')}>View Graph</button>\n          <MovieCardDeck movies={processedMovies} />\n        </div>\n      ) : (\n        <GraphPage\n          navigateHome={() => setCurrentPage('home')}\n          fullPath={fullPath}\n          processedMovies={processedMovies}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}