{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kalim\\\\PycharmProjects\\\\IMDBSpeedrunGame\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n//frontend/src/App.js\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [startMovie, setStartMovie] = useState('');\n  const [endMovie, setEndMovie] = useState('');\n  const [startMovieSuggestions, setStartMovieSuggestions] = useState([]);\n  const [endMovieSuggestions, setEndMovieSuggestions] = useState([]);\n  const [bfsPath, setBfsPath] = useState(null);\n  const [dijkstraPath, setDijkstraPath] = useState(null);\n\n  // Fetch movie suggestions from the API (including year and director)\n  const fetchMovieSuggestions = async (query, setSuggestions) => {\n    if (query.length > 2) {\n      const res = await axios.get(`/search_movie?movie_name=${query}`);\n      setSuggestions(res.data);\n    } else {\n      setSuggestions([]);\n    }\n  };\n\n  // Handle selection from the dropdown\n  const handleSelectSuggestion = (movie, setMovie, setSuggestions) => {\n    setMovie(movie.title);\n    setSuggestions([]);\n  };\n  const searchMovies = async () => {\n    const res = await axios.get(`/search_path?start=${startMovie}&end=${endMovie}`);\n    setBfsPath(res.data.bfs_path);\n    setDijkstraPath(res.data.dijkstra_path);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Movie Path Finder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"autocomplete\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: startMovie,\n        onChange: e => {\n          setStartMovie(e.target.value);\n          fetchMovieSuggestions(e.target.value, setStartMovieSuggestions);\n        },\n        placeholder: \"Start Movie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), startMovieSuggestions.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"suggestions\",\n        children: startMovieSuggestions.map((movie, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => handleSelectSuggestion(movie, setStartMovie, setStartMovieSuggestions),\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: movie.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 33\n          }, this), \" (\", movie.year, \") - Directed by \", movie.director]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"autocomplete\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: endMovie,\n        onChange: e => {\n          setEndMovie(e.target.value);\n          fetchMovieSuggestions(e.target.value, setEndMovieSuggestions);\n        },\n        placeholder: \"End Movie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), endMovieSuggestions.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"suggestions\",\n        children: endMovieSuggestions.map((movie, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => handleSelectSuggestion(movie, setEndMovie, setEndMovieSuggestions),\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: movie.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 33\n          }, this), \" (\", movie.year, \") - Directed by \", movie.director]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: searchMovies,\n      children: \"Find Path\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), bfsPath && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"BFS Path:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }, this), bfsPath.path.map((movie, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: movie\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 29\n        }, this), index < bfsPath.connections.length && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Connected via: \", bfsPath.connections[index]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 33\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 25\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }, this), dijkstraPath && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Dijkstra Path:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 21\n      }, this), dijkstraPath.path.map((movie, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: movie\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 29\n        }, this), index < dijkstraPath.connections.length && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Connected via: \", dijkstraPath.connections[index]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 33\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 25\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"m200CUTRjzdcSLDNVAp7YsLlGSo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","App","_s","startMovie","setStartMovie","endMovie","setEndMovie","startMovieSuggestions","setStartMovieSuggestions","endMovieSuggestions","setEndMovieSuggestions","bfsPath","setBfsPath","dijkstraPath","setDijkstraPath","fetchMovieSuggestions","query","setSuggestions","length","res","get","data","handleSelectSuggestion","movie","setMovie","title","searchMovies","bfs_path","dijkstra_path","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","map","index","onClick","year","director","path","connections","_c","$RefreshReg$"],"sources":["C:/Users/kalim/PycharmProjects/IMDBSpeedrunGame/frontend/src/App.js"],"sourcesContent":["//frontend/src/App.js\r\n\r\nimport React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport './styles.css';\r\n\r\nfunction App() {\r\n    const [startMovie, setStartMovie] = useState('');\r\n    const [endMovie, setEndMovie] = useState('');\r\n    const [startMovieSuggestions, setStartMovieSuggestions] = useState([]);\r\n    const [endMovieSuggestions, setEndMovieSuggestions] = useState([]);\r\n    const [bfsPath, setBfsPath] = useState(null);\r\n    const [dijkstraPath, setDijkstraPath] = useState(null);\r\n\r\n    // Fetch movie suggestions from the API (including year and director)\r\n    const fetchMovieSuggestions = async (query, setSuggestions) => {\r\n        if (query.length > 2) {\r\n            const res = await axios.get(`/search_movie?movie_name=${query}`);\r\n            setSuggestions(res.data);\r\n        } else {\r\n            setSuggestions([]);\r\n        }\r\n    };\r\n\r\n\r\n    // Handle selection from the dropdown\r\n    const handleSelectSuggestion = (movie, setMovie, setSuggestions) => {\r\n        setMovie(movie.title);\r\n        setSuggestions([]);\r\n    };\r\n\r\n    const searchMovies = async () => {\r\n        const res = await axios.get(`/search_path?start=${startMovie}&end=${endMovie}`);\r\n        setBfsPath(res.data.bfs_path);\r\n        setDijkstraPath(res.data.dijkstra_path);\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1>Movie Path Finder</h1>\r\n\r\n            <div className=\"autocomplete\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={startMovie}\r\n                    onChange={e => {\r\n                        setStartMovie(e.target.value);\r\n                        fetchMovieSuggestions(e.target.value, setStartMovieSuggestions);\r\n                    }}\r\n                    placeholder=\"Start Movie\"\r\n                />\r\n                {startMovieSuggestions.length > 0 && (\r\n                    <ul className=\"suggestions\">\r\n                        {startMovieSuggestions.map((movie, index) => (\r\n                            <li key={index} onClick={() => handleSelectSuggestion(movie, setStartMovie, setStartMovieSuggestions)}>\r\n                                <strong>{movie.title}</strong> ({movie.year}) - Directed by {movie.director}\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                )}\r\n            </div>\r\n\r\n            <div className=\"autocomplete\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={endMovie}\r\n                    onChange={e => {\r\n                        setEndMovie(e.target.value);\r\n                        fetchMovieSuggestions(e.target.value, setEndMovieSuggestions);\r\n                    }}\r\n                    placeholder=\"End Movie\"\r\n                />\r\n                {endMovieSuggestions.length > 0 && (\r\n                    <ul className=\"suggestions\">\r\n                        {endMovieSuggestions.map((movie, index) => (\r\n                            <li key={index} onClick={() => handleSelectSuggestion(movie, setEndMovie, setEndMovieSuggestions)}>\r\n                                <strong>{movie.title}</strong> ({movie.year}) - Directed by {movie.director}\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                )}\r\n            </div>\r\n\r\n            <button onClick={searchMovies}>Find Path</button>\r\n\r\n             {bfsPath && (\r\n                <div>\r\n                    <h2>BFS Path:</h2>\r\n                    {bfsPath.path.map((movie, index) => (\r\n                        <div key={index}>\r\n                            <p>{movie}</p>\r\n                            {index < bfsPath.connections.length && (\r\n                                <p>Connected via: {bfsPath.connections[index]}</p>\r\n                            )}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            )}\r\n\r\n            {dijkstraPath && (\r\n                <div>\r\n                    <h2>Dijkstra Path:</h2>\r\n                    {dijkstraPath.path.map((movie, index) => (\r\n                        <div key={index}>\r\n                            <p>{movie}</p>\r\n                            {index < dijkstraPath.connections.length && (\r\n                                <p>Connected via: {dijkstraPath.connections[index]}</p>\r\n                            )}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}