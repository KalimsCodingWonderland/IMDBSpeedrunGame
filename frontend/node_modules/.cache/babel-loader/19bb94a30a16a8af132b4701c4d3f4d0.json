{"ast":null,"code":"var _jsxFileName = \"/Users/lucasperez/GitHub/IMDBSpeedrunGame/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport MovieCardDeck from './MovieCardDeck';\nimport GraphPage from './GraphPage'; // New component for the graph page\nimport './styles.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentPage, setCurrentPage] = useState('home'); // Navigation state\n  const [startMovie, setStartMovie] = useState('');\n  const [endMovie, setEndMovie] = useState('');\n  const [algorithm, setAlgorithm] = useState('dijkstra');\n  const [startMovieSuggestions, setStartMovieSuggestions] = useState([]);\n  const [endMovieSuggestions, setEndMovieSuggestions] = useState([]);\n  const [path, setPath] = useState(null);\n  const [processedMovies, setProcessedMovies] = useState([]);\n  const [topProcessedMovies, setTopProcessedMovies] = useState([]);\n  const [error, setError] = useState(null);\n  const [startMovieId, setStartMovieId] = useState(null);\n  const [endMovieId, setEndMovieId] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [loadedMovies, setLoadedMovies] = useState([]);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const fetchMovieSuggestions = async (query, setSuggestions) => {\n    if (query.length > 2) {\n      try {\n        const res = await axios.get(`/search_movie?movie_name=${encodeURIComponent(query)}`);\n        setSuggestions(res.data.results || []);\n      } catch (err) {\n        console.error('Error fetching movie suggestions:', err);\n        setSuggestions([]);\n      }\n    } else {\n      setSuggestions([]);\n    }\n  };\n  const handleSelectSuggestion = (movie, setMovie, setSuggestions, setMovieId) => {\n    setMovie(movie.title);\n    setMovieId(movie.id); // Set the selected movie ID\n    setSuggestions([]);\n  };\n  const searchMovies = async () => {\n    if (!startMovie || !endMovie) {\n      setError('Please select both start and end movies.');\n      return;\n    }\n    if (!startMovieId || !endMovieId) {\n      setError('Invalid movie selections. Please try again.');\n      return;\n    }\n    setIsProcessing(true);\n    setProcessedMovies([]);\n    setLoadedMovies([]);\n    setTopProcessedMovies([]);\n    setPath(null);\n    setError(null);\n    try {\n      // Step 1: Fetch the path using movie IDs\n      const pathResponse = await axios.get(`/find_path?start_id=${startMovieId}&end_id=${endMovieId}&algorithm=${algorithm}`);\n      const algorithmPath = pathResponse.data.path;\n      if (algorithmPath) {\n        setPath(algorithmPath);\n        setStartMovieId(algorithmPath.movies[0].id);\n        setEndMovieId(algorithmPath.movies[algorithmPath.movies.length - 1].id);\n\n        // Step 2: Start fetching processed movies progressively\n        fetchProcessedMoviesProgressively();\n      }\n    } catch (err) {\n      console.error('Error finding path:', err);\n      setError('Unable to find a path between the selected movies.');\n      setIsProcessing(false);\n    }\n  };\n  const fetchProcessedMoviesProgressively = async () => {\n    try {\n      let offset = 0;\n      const batchSize = 250;\n      const maxMovies = 500; // Set this to the maximum number of movies you want to load\n\n      const fetchBatch = async () => {\n        setIsLoadingMore(true);\n        const res = await axios.get(`/get_processed_movies?offset=${offset}&limit=${batchSize}`);\n        const newMovies = res.data.processed_movies;\n        const totalCount = res.data.total_count; // New field from backend\n\n        if (newMovies && newMovies.length > 0) {\n          setLoadedMovies(prevMovies => [...prevMovies, ...newMovies]);\n          setTopProcessedMovies(prevMovies => {\n            const updatedMovies = [...prevMovies, ...newMovies];\n            return updatedMovies.slice(0, 250);\n          });\n          offset += newMovies.length;\n          setTotalMoviesCount(totalCount);\n          if (offset < Math.min(totalCount, maxMovies)) {\n            setTimeout(fetchBatch, 100); // Fetch next batch after a short delay\n          } else {\n            setIsLoadingMore(false);\n            setIsProcessing(false);\n          }\n        } else {\n          setIsLoadingMore(false);\n          setIsProcessing(false);\n        }\n      };\n      await fetchBatch();\n    } catch (err) {\n      console.error('Error fetching processed movies:', err);\n      setIsLoadingMore(false);\n      setIsProcessing(false);\n    }\n  };\n  const renderPage = () => {\n    /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uD83C\\uDFAC Movie Path Finder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCurrentPage('graph'),\n        children: \"View Interactive Graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"autocomplete\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: startMovie,\n          onChange: e => {\n            setStartMovie(e.target.value);\n            fetchMovieSuggestions(e.target.value, setStartMovieSuggestions);\n          },\n          placeholder: \"Start Movie\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 9\n        }, this), startMovieSuggestions.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"suggestions\",\n          children: startMovieSuggestions.map(movie => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => handleSelectSuggestion(movie, setStartMovie, setStartMovieSuggestions, setStartMovieId),\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: movie.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 17\n            }, this), \" (\", movie.year, \") - Directed by\", ' ', movie.director || 'N/A']\n          }, movie.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"autocomplete\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: endMovie,\n          onChange: e => {\n            setEndMovie(e.target.value);\n            fetchMovieSuggestions(e.target.value, setEndMovieSuggestions);\n          },\n          placeholder: \"End Movie\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 9\n        }, this), endMovieSuggestions.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"suggestions\",\n          children: endMovieSuggestions.map(movie => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => handleSelectSuggestion(movie, setEndMovie, setEndMovieSuggestions, setEndMovieId),\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: movie.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 17\n            }, this), \" (\", movie.year, \") - Directed by\", ' ', movie.director || 'N/A']\n          }, movie.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"algorithm-selection\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Select Algorithm:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: algorithm,\n          onChange: e => setAlgorithm(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"dijkstra\",\n            children: \"Dijkstra's Algorithm\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"bfs\",\n            children: \"Bidirectional BFS\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: searchMovies,\n        disabled: isProcessing,\n        children: isProcessing ? 'Searching...' : 'Find Path'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 7\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 17\n      }, this), isProcessing && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Processing movies... Please wait.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), path && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"path-result\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [algorithm === 'dijkstra' ? \"Dijkstra's\" : 'Bidirectional BFS', ' ', \"Path:\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: path.movies.map((movie, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: movie.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 236,\n                columnNumber: 19\n              }, this), \" (\", movie.year, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 17\n            }, this), index < path.connections.length && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Connected via: \", /*#__PURE__*/_jsxDEV(\"em\", {\n                children: path.connections[index]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 240,\n                columnNumber: 36\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 19\n            }, this)]\n          }, movie.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), loadedMovies.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Processed Movies:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MovieCardDeck, {\n          movies: topProcessedMovies,\n          startMovieId: startMovieId,\n          endMovieId: endMovieId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this), isLoadingMore && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"loading-more\",\n          children: \"Loading more movies...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true), path && !processedMovies.length && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"similar-movies\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Similar Movies You Might Like:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 5\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: renderPage()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 274,\n    columnNumber: 10\n  }, this);\n}\n_s(App, \"gvEDq+bQEnUntL0nPqccuWB170o=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","MovieCardDeck","GraphPage","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","currentPage","setCurrentPage","startMovie","setStartMovie","endMovie","setEndMovie","algorithm","setAlgorithm","startMovieSuggestions","setStartMovieSuggestions","endMovieSuggestions","setEndMovieSuggestions","path","setPath","processedMovies","setProcessedMovies","topProcessedMovies","setTopProcessedMovies","error","setError","startMovieId","setStartMovieId","endMovieId","setEndMovieId","isProcessing","setIsProcessing","loadedMovies","setLoadedMovies","isLoadingMore","setIsLoadingMore","fetchMovieSuggestions","query","setSuggestions","length","res","axios","get","encodeURIComponent","data","results","err","console","handleSelectSuggestion","movie","setMovie","setMovieId","title","id","searchMovies","pathResponse","algorithmPath","movies","fetchProcessedMoviesProgressively","offset","batchSize","maxMovies","fetchBatch","newMovies","processed_movies","totalCount","total_count","prevMovies","updatedMovies","slice","setTotalMoviesCount","Math","min","setTimeout","renderPage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","value","onChange","e","target","placeholder","map","year","director","disabled","index","connections","_c","$RefreshReg$"],"sources":["/Users/lucasperez/GitHub/IMDBSpeedrunGame/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport MovieCardDeck from './MovieCardDeck';\nimport GraphPage from './GraphPage'; // New component for the graph page\nimport './styles.css';\n\nfunction App() {\n  const [currentPage, setCurrentPage] = useState('home'); // Navigation state\n  const [startMovie, setStartMovie] = useState('');\n  const [endMovie, setEndMovie] = useState('');\n  const [algorithm, setAlgorithm] = useState('dijkstra');\n  const [startMovieSuggestions, setStartMovieSuggestions] = useState([]);\n  const [endMovieSuggestions, setEndMovieSuggestions] = useState([]);\n  const [path, setPath] = useState(null);\n  const [processedMovies, setProcessedMovies] = useState([]);\n  const [topProcessedMovies, setTopProcessedMovies] = useState([]);\n  const [error, setError] = useState(null);\n  const [startMovieId, setStartMovieId] = useState(null);\n  const [endMovieId, setEndMovieId] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [loadedMovies, setLoadedMovies] = useState([]);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n\n  const fetchMovieSuggestions = async (query, setSuggestions) => {\n    if (query.length > 2) {\n      try {\n        const res = await axios.get(`/search_movie?movie_name=${encodeURIComponent(query)}`);\n        setSuggestions(res.data.results || []);\n      } catch (err) {\n        console.error('Error fetching movie suggestions:', err);\n        setSuggestions([]);\n      }\n    } else {\n      setSuggestions([]);\n    }\n  };\n\n  const handleSelectSuggestion = (movie, setMovie, setSuggestions, setMovieId) => {\n    setMovie(movie.title);\n    setMovieId(movie.id); // Set the selected movie ID\n    setSuggestions([]);\n  };\n\n\n  const searchMovies = async () => {\n    if (!startMovie || !endMovie) {\n      setError('Please select both start and end movies.');\n      return;\n    }\n\n    if (!startMovieId || !endMovieId) {\n      setError('Invalid movie selections. Please try again.');\n      return;\n    }\n\n    setIsProcessing(true);\n    setProcessedMovies([]);\n    setLoadedMovies([]);\n    setTopProcessedMovies([]);\n    setPath(null);\n    setError(null);\n\n    try {\n      // Step 1: Fetch the path using movie IDs\n      const pathResponse = await axios.get(\n        `/find_path?start_id=${startMovieId}&end_id=${endMovieId}&algorithm=${algorithm}`\n      );\n\n      const algorithmPath = pathResponse.data.path;\n\n      if (algorithmPath) {\n        setPath(algorithmPath);\n        setStartMovieId(algorithmPath.movies[0].id);\n        setEndMovieId(algorithmPath.movies[algorithmPath.movies.length - 1].id);\n\n        // Step 2: Start fetching processed movies progressively\n        fetchProcessedMoviesProgressively();\n      }\n\n    } catch (err) {\n      console.error('Error finding path:', err);\n      setError('Unable to find a path between the selected movies.');\n      setIsProcessing(false);\n    }\n  };\n\n  const fetchProcessedMoviesProgressively = async () => {\n    try {\n      let offset = 0;\n      const batchSize = 250;\n      const maxMovies = 500; // Set this to the maximum number of movies you want to load\n\n      const fetchBatch = async () => {\n        setIsLoadingMore(true);\n        const res = await axios.get(`/get_processed_movies?offset=${offset}&limit=${batchSize}`);\n        const newMovies = res.data.processed_movies;\n        const totalCount = res.data.total_count; // New field from backend\n\n        if (newMovies && newMovies.length > 0) {\n          setLoadedMovies(prevMovies => [...prevMovies, ...newMovies]);\n          setTopProcessedMovies(prevMovies => {\n            const updatedMovies = [...prevMovies, ...newMovies];\n            return updatedMovies.slice(0, 250);\n          });\n          offset += newMovies.length;\n          setTotalMoviesCount(totalCount);\n\n          if (offset < Math.min(totalCount, maxMovies)) {\n            setTimeout(fetchBatch, 100); // Fetch next batch after a short delay\n          } else {\n            setIsLoadingMore(false);\n            setIsProcessing(false);\n          }\n        } else {\n          setIsLoadingMore(false);\n          setIsProcessing(false);\n        }\n      };\n\n      await fetchBatch();\n    } catch (err) {\n      console.error('Error fetching processed movies:', err);\n      setIsLoadingMore(false);\n      setIsProcessing(false);\n    }\n  };\n\n  const renderPage = () => {\n    <div className=\"container\">\n      <h1>🎬 Movie Path Finder</h1>\n      <button onClick={() => setCurrentPage('graph')}>\n        View Interactive Graph\n      </button>\n      {/* Start Movie Input */}\n      <div className=\"autocomplete\">\n        <input\n          type=\"text\"\n          value={startMovie}\n          onChange={(e) => {\n            setStartMovie(e.target.value);\n            fetchMovieSuggestions(e.target.value, setStartMovieSuggestions);\n          }}\n          placeholder=\"Start Movie\"\n        />\n        {startMovieSuggestions.length > 0 && (\n          <ul className=\"suggestions\">\n            {startMovieSuggestions.map((movie) => (\n              <li\n                key={movie.id}\n                onClick={() =>\n                  handleSelectSuggestion(\n                    movie,\n                    setStartMovie,\n                    setStartMovieSuggestions,\n                    setStartMovieId\n                  )\n                }\n              >\n                <strong>{movie.title}</strong> ({movie.year}) - Directed by{' '}\n                {movie.director || 'N/A'}\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n\n      {/* End Movie Input */}\n      <div className=\"autocomplete\">\n        <input\n          type=\"text\"\n          value={endMovie}\n          onChange={(e) => {\n            setEndMovie(e.target.value);\n            fetchMovieSuggestions(e.target.value, setEndMovieSuggestions);\n          }}\n          placeholder=\"End Movie\"\n        />\n        {endMovieSuggestions.length > 0 && (\n          <ul className=\"suggestions\">\n            {endMovieSuggestions.map((movie) => (\n              <li\n                key={movie.id}\n                onClick={() =>\n                  handleSelectSuggestion(\n                    movie,\n                    setEndMovie,\n                    setEndMovieSuggestions,\n                    setEndMovieId\n                  )\n                }\n              >\n                <strong>{movie.title}</strong> ({movie.year}) - Directed by{' '}\n                {movie.director || 'N/A'}\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n\n      {/* Algorithm Selection */}\n      <div className=\"algorithm-selection\">\n        <label>Select Algorithm:</label>\n        <select value={algorithm} onChange={(e) => setAlgorithm(e.target.value)}>\n          <option value=\"dijkstra\">Dijkstra's Algorithm</option>\n          <option value=\"bfs\">Bidirectional BFS</option>\n        </select>\n      </div>\n\n      {/* Search Button */}\n      <button onClick={searchMovies} disabled={isProcessing}>\n        {isProcessing ? 'Searching...' : 'Find Path'}\n      </button>\n\n      {/* Error Message */}\n      {error && <p className=\"error\">{error}</p>}\n\n      {/* Loading Indicator */}\n      {isProcessing && (\n        <div className=\"loading\">\n          <p>Processing movies... Please wait.</p>\n        </div>\n      )}\n\n      {/* Display Path */}\n      {path && (\n        <div className=\"path-result\">\n          <h2>\n            {algorithm === 'dijkstra'\n              ? \"Dijkstra's\"\n              : 'Bidirectional BFS'}{' '}\n            Path:\n          </h2>\n          <ul>\n            {path.movies.map((movie, index) => (\n              <li key={movie.id}>\n                <p>\n                  <strong>{movie.title}</strong> ({movie.year})\n                </p>\n                {index < path.connections.length && (\n                  <p>\n                    Connected via: <em>{path.connections[index]}</em>\n                  </p>\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n\n      {/* Processed Movies */}\n      {loadedMovies.length > 0 && (\n        <>\n          <h2>Processed Movies:</h2>\n          <MovieCardDeck\n            movies={topProcessedMovies}\n            startMovieId={startMovieId}\n            endMovieId={endMovieId}\n          />\n          {isLoadingMore && <p className=\"loading-more\">Loading more movies...</p>}\n        </>\n      )}\n\n      {/* Similar Movies Section */}\n      {path && !processedMovies.length && (\n        <div className=\"similar-movies\">\n          <h2>Similar Movies You Might Like:</h2>\n          <ul>\n            {/* Implement similar movies logic */}\n          </ul>\n        </div>\n      )}\n    </div>\n  };\n\n  return <div className=\"container\">{renderPage()}</div>;\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}