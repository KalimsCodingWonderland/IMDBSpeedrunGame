{"ast":null,"code":"var _jsxFileName = \"/Users/lucasperez/GitHub/IMDBSpeedrunGame/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './styles.css';\nimport MovieCardDeck from './MovieCardDeck';\nimport GraphPage from './GraphPage';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentPage, setCurrentPage] = useState('home');\n  const [startMovie, setStartMovie] = useState('');\n  const [endMovie, setEndMovie] = useState('');\n  const [algorithm, setAlgorithm] = useState('dijkstra');\n  const [startMovieSuggestions, setStartMovieSuggestions] = useState([]);\n  const [endMovieSuggestions, setEndMovieSuggestions] = useState([]);\n  const [path, setPath] = useState(null);\n  const [fullPath, setFullPath] = useState([]);\n  const [processedMovies, setProcessedMovies] = useState([]);\n  const [topProcessedMovies, setTopProcessedMovies] = useState([]);\n  const [startMovieId, setStartMovieId] = useState(null);\n  const [endMovieId, setEndMovieId] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [executionTime, setExecutionTime] = useState(null);\n  const [lastExecutedAlgorithm, setLastExecutedAlgorithm] = useState('');\n  const [error, setError] = useState(null);\n\n  // Fetch movie suggestions\n  const fetchMovieSuggestions = async (query, setSuggestions) => {\n    if (query.length > 2) {\n      try {\n        const res = await axios.get(`/search_movie?movie_name=${encodeURIComponent(query)}`);\n        setSuggestions(res.data.results || []);\n      } catch (err) {\n        console.error('Error fetching movie suggestions:', err);\n        setSuggestions([]);\n      }\n    } else {\n      setSuggestions([]);\n    }\n  };\n  const handleSelectSuggestion = (movie, setMovie, setSuggestions, setMovieId) => {\n    setMovie(movie.title);\n    setMovieId(movie.id);\n    setSuggestions([]);\n  };\n\n  // Search for the path using the selected algorithm\n  const searchMovies = async () => {\n    if (!startMovie || !endMovie) {\n      setError('Please select both start and end movies.');\n      return;\n    }\n    if (!startMovieId || !endMovieId) {\n      setError('Invalid movie selections. Please try again.');\n      return;\n    }\n    setIsProcessing(true);\n    setError(null);\n    setPath(null);\n    setFullPath([]);\n    setProcessedMovies([]);\n    setTopProcessedMovies([]);\n    try {\n      const res = await axios.get(`/find_path?start_id=${startMovieId}&end_id=${endMovieId}&algorithm=${algorithm}`);\n      console.log('API Response:', res.data); // Debugging\n      const algorithmPath = res.data.path;\n      const timeTaken = res.data.execution_time;\n      if (algorithmPath) {\n        setPath(algorithmPath);\n        setFullPath(algorithmPath.movies);\n        fetchProcessedMoviesProgressively(); // Start fetching processed movies dynamically\n        setExecutionTime(timeTaken);\n        setLastExecutedAlgorithm(algorithm);\n        fetchAllProcessedMovies();\n      }\n    } catch (err) {\n      console.error('Error finding path:', err);\n      setError('Unable to find a path between the selected movies.');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  // Fetch all processed movies progressively\n  const fetchAllProcessedMovies = async () => {\n    try {\n      let offset = 0;\n      const batchSize = 250;\n      const fetchBatch = async () => {\n        setIsLoadingMore(true); // Show loading indicator\n        const res = await axios.get(`/get_processed_movies?offset=${offset}&limit=${batchSize}`);\n        const newMovies = res.data.processed_movies;\n        if (newMovies && newMovies.length > 0) {\n          setProcessedMovies(prevMovies => [...prevMovies, ...newMovies]);\n          offset += newMovies.length;\n          if (offset < res.data.total_count) {\n            setTimeout(fetchBatch, 100); // Fetch next batch\n          } else {\n            setIsLoadingMore(false); // Stop loading once all movies are fetched\n          }\n        } else {\n          setIsLoadingMore(false); // Stop loading if no more movies\n        }\n      };\n      await fetchBatch();\n    } catch (err) {\n      console.error('Error fetching all processed movies:', err);\n      setIsLoadingMore(false);\n    }\n  };\n\n  // Fetch processed movies progressively\n  const fetchProcessedMoviesProgressively = async () => {\n    try {\n      let offset = 0;\n      const batchSize = 250;\n      const maxMovies = 500;\n      const fetchBatch = async () => {\n        setIsLoadingMore(true);\n        const res = await axios.get(`/get_processed_movies?offset=${offset}&limit=${batchSize}`);\n        const newMovies = res.data.processed_movies;\n        if (newMovies && newMovies.length > 0) {\n          setProcessedMovies(prevMovies => [...prevMovies, ...newMovies]);\n          setTopProcessedMovies(prevMovies => {\n            const updatedMovies = [...prevMovies, ...newMovies];\n            return updatedMovies.slice(0, 250); // Keep the top 250 movies\n          });\n          offset += newMovies.length;\n          if (offset < Math.min(res.data.total_count, maxMovies)) {\n            setTimeout(fetchBatch, 100); // Continue fetching next batch\n          } else {\n            setIsLoadingMore(false);\n          }\n        } else {\n          setIsLoadingMore(false);\n        }\n      };\n      await fetchBatch();\n    } catch (err) {\n      console.error('Error fetching processed movies:', err);\n      setIsLoadingMore(false);\n    }\n  };\n\n  // Render the home page\n  const renderHomePage = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uD83C\\uDFAC Movie Path Finder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"autocomplete\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: startMovie,\n        onChange: e => {\n          setStartMovie(e.target.value);\n          fetchMovieSuggestions(e.target.value, setStartMovieSuggestions);\n        },\n        placeholder: \"Start Movie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), startMovieSuggestions.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"suggestions\",\n        children: startMovieSuggestions.map(movie => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => handleSelectSuggestion(movie, setStartMovie, setStartMovieSuggestions, setStartMovieId),\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: movie.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 17\n          }, this), \" (\", movie.year, \")\"]\n        }, movie.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"autocomplete\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: endMovie,\n        onChange: e => {\n          setEndMovie(e.target.value);\n          fetchMovieSuggestions(e.target.value, setEndMovieSuggestions);\n        },\n        placeholder: \"End Movie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), endMovieSuggestions.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"suggestions\",\n        children: endMovieSuggestions.map(movie => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => handleSelectSuggestion(movie, setEndMovie, setEndMovieSuggestions, setEndMovieId),\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: movie.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 17\n          }, this), \" (\", movie.year, \")\"]\n        }, movie.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"algorithm-selection\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Select Algorithm:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: algorithm,\n        onChange: e => setAlgorithm(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"dijkstra\",\n          children: \"Dijkstra's Algorithm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"bfs\",\n          children: \"Bidirectional BFS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: searchMovies,\n      disabled: isProcessing,\n      children: isProcessing ? 'Searching...' : 'Find Path'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 17\n    }, this), isProcessing ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Processing movies... Please wait.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 9\n    }, this) : executionTime && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [lastExecutedAlgorithm === 'dijkstra' ? \"Dijkstra's Execution Time\" : 'Bidirectional BFS Execution Time', \": \", executionTime.toFixed(2), \" seconds\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 11\n    }, this), path && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [lastExecutedAlgorithm === 'dijkstra' ? \"Dijkstra's\" : 'Bidirectional BFS', \" Path:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: path.movies.map((movie, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [movie.title, \" (\", movie.year, \")\", index < path.connections.length && /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\" Connected via: \", path.connections[index]]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 17\n          }, this)\n        }, movie.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 9\n    }, this), topProcessedMovies.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Processed Movies:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MovieCardDeck, {\n        movies: topProcessedMovies,\n        startMovieId: startMovieId,\n        endMovieId: endMovieId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCurrentPage('graph'),\n        children: \"View Interactive Graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), isLoadingMore && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading more processed movies...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: currentPage === 'home' ? renderHomePage() : /*#__PURE__*/_jsxDEV(GraphPage, {\n      navigateHome: () => setCurrentPage('home'),\n      fullPath: fullPath,\n      processedMovies: processedMovies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 282,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"pCui107vyBVpEmGMe+n3Kk9mxAo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","MovieCardDeck","GraphPage","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","currentPage","setCurrentPage","startMovie","setStartMovie","endMovie","setEndMovie","algorithm","setAlgorithm","startMovieSuggestions","setStartMovieSuggestions","endMovieSuggestions","setEndMovieSuggestions","path","setPath","fullPath","setFullPath","processedMovies","setProcessedMovies","topProcessedMovies","setTopProcessedMovies","startMovieId","setStartMovieId","endMovieId","setEndMovieId","isProcessing","setIsProcessing","isLoadingMore","setIsLoadingMore","executionTime","setExecutionTime","lastExecutedAlgorithm","setLastExecutedAlgorithm","error","setError","fetchMovieSuggestions","query","setSuggestions","length","res","get","encodeURIComponent","data","results","err","console","handleSelectSuggestion","movie","setMovie","setMovieId","title","id","searchMovies","log","algorithmPath","timeTaken","execution_time","movies","fetchProcessedMoviesProgressively","fetchAllProcessedMovies","offset","batchSize","fetchBatch","newMovies","processed_movies","prevMovies","total_count","setTimeout","maxMovies","updatedMovies","slice","Math","min","renderHomePage","children","fileName","_jsxFileName","lineNumber","columnNumber","className","type","value","onChange","e","target","placeholder","map","onClick","year","disabled","toFixed","index","connections","navigateHome","_c","$RefreshReg$"],"sources":["/Users/lucasperez/GitHub/IMDBSpeedrunGame/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './styles.css';\nimport MovieCardDeck from './MovieCardDeck';\nimport GraphPage from './GraphPage';\n\nfunction App() {\n  const [currentPage, setCurrentPage] = useState('home');\n  const [startMovie, setStartMovie] = useState('');\n  const [endMovie, setEndMovie] = useState('');\n  const [algorithm, setAlgorithm] = useState('dijkstra');\n  const [startMovieSuggestions, setStartMovieSuggestions] = useState([]);\n  const [endMovieSuggestions, setEndMovieSuggestions] = useState([]);\n  const [path, setPath] = useState(null);\n  const [fullPath, setFullPath] = useState([]);\n  const [processedMovies, setProcessedMovies] = useState([]);\n  const [topProcessedMovies, setTopProcessedMovies] = useState([]);\n  const [startMovieId, setStartMovieId] = useState(null);\n  const [endMovieId, setEndMovieId] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [executionTime, setExecutionTime] = useState(null);\n  const [lastExecutedAlgorithm, setLastExecutedAlgorithm] = useState('');\n  const [error, setError] = useState(null);\n\n  // Fetch movie suggestions\n  const fetchMovieSuggestions = async (query, setSuggestions) => {\n    if (query.length > 2) {\n      try {\n        const res = await axios.get(`/search_movie?movie_name=${encodeURIComponent(query)}`);\n        setSuggestions(res.data.results || []);\n      } catch (err) {\n        console.error('Error fetching movie suggestions:', err);\n        setSuggestions([]);\n      }\n    } else {\n      setSuggestions([]);\n    }\n  };\n\n  const handleSelectSuggestion = (movie, setMovie, setSuggestions, setMovieId) => {\n    setMovie(movie.title);\n    setMovieId(movie.id);\n    setSuggestions([]);\n  };\n\n  // Search for the path using the selected algorithm\n  const searchMovies = async () => {\n    if (!startMovie || !endMovie) {\n      setError('Please select both start and end movies.');\n      return;\n    }\n\n    if (!startMovieId || !endMovieId) {\n      setError('Invalid movie selections. Please try again.');\n      return;\n    }\n\n    setIsProcessing(true);\n    setError(null);\n    setPath(null);\n    setFullPath([]);\n    setProcessedMovies([]);\n    setTopProcessedMovies([]);\n\n    try {\n      const res = await axios.get(`/find_path?start_id=${startMovieId}&end_id=${endMovieId}&algorithm=${algorithm}`);\n      console.log('API Response:', res.data); // Debugging\n      const algorithmPath = res.data.path;\n      const timeTaken = res.data.execution_time;\n\n      if (algorithmPath) {\n        setPath(algorithmPath);\n        setFullPath(algorithmPath.movies);\n        fetchProcessedMoviesProgressively(); // Start fetching processed movies dynamically\n        setExecutionTime(timeTaken);\n        setLastExecutedAlgorithm(algorithm);\n        fetchAllProcessedMovies();\n      }\n    } catch (err) {\n      console.error('Error finding path:', err);\n      setError('Unable to find a path between the selected movies.');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  // Fetch all processed movies progressively\n  const fetchAllProcessedMovies = async () => {\n    try {\n      let offset = 0;\n      const batchSize = 250;\n\n      const fetchBatch = async () => {\n        setIsLoadingMore(true); // Show loading indicator\n        const res = await axios.get(`/get_processed_movies?offset=${offset}&limit=${batchSize}`);\n        const newMovies = res.data.processed_movies;\n\n        if (newMovies && newMovies.length > 0) {\n          setProcessedMovies((prevMovies) => [...prevMovies, ...newMovies]);\n          offset += newMovies.length;\n\n          if (offset < res.data.total_count) {\n            setTimeout(fetchBatch, 100); // Fetch next batch\n          } else {\n            setIsLoadingMore(false); // Stop loading once all movies are fetched\n          }\n        } else {\n          setIsLoadingMore(false); // Stop loading if no more movies\n        }\n      };\n\n      await fetchBatch();\n    } catch (err) {\n      console.error('Error fetching all processed movies:', err);\n      setIsLoadingMore(false);\n    }\n  };\n\n  // Fetch processed movies progressively\n  const fetchProcessedMoviesProgressively = async () => {\n    try {\n      let offset = 0;\n      const batchSize = 250;\n      const maxMovies = 500;\n\n      const fetchBatch = async () => {\n        setIsLoadingMore(true);\n        const res = await axios.get(`/get_processed_movies?offset=${offset}&limit=${batchSize}`);\n        const newMovies = res.data.processed_movies;\n\n        if (newMovies && newMovies.length > 0) {\n          setProcessedMovies((prevMovies) => [...prevMovies, ...newMovies]);\n          setTopProcessedMovies((prevMovies) => {\n            const updatedMovies = [...prevMovies, ...newMovies];\n            return updatedMovies.slice(0, 250); // Keep the top 250 movies\n          });\n          offset += newMovies.length;\n\n          if (offset < Math.min(res.data.total_count, maxMovies)) {\n            setTimeout(fetchBatch, 100); // Continue fetching next batch\n          } else {\n            setIsLoadingMore(false);\n          }\n        } else {\n          setIsLoadingMore(false);\n        }\n      };\n\n      await fetchBatch();\n    } catch (err) {\n      console.error('Error fetching processed movies:', err);\n      setIsLoadingMore(false);\n    }\n  };\n\n  // Render the home page\n  const renderHomePage = () => (\n    <div>\n      <h1>🎬 Movie Path Finder</h1>\n\n      {/* Start Movie Input */}\n      <div className=\"autocomplete\">\n        <input\n          type=\"text\"\n          value={startMovie}\n          onChange={(e) => {\n            setStartMovie(e.target.value);\n            fetchMovieSuggestions(e.target.value, setStartMovieSuggestions);\n          }}\n          placeholder=\"Start Movie\"\n        />\n        {startMovieSuggestions.length > 0 && (\n          <ul className=\"suggestions\">\n            {startMovieSuggestions.map((movie) => (\n              <li\n                key={movie.id}\n                onClick={() =>\n                  handleSelectSuggestion(movie, setStartMovie, setStartMovieSuggestions, setStartMovieId)\n                }\n              >\n                <strong>{movie.title}</strong> ({movie.year})\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n\n      {/* End Movie Input */}\n      <div className=\"autocomplete\">\n        <input\n          type=\"text\"\n          value={endMovie}\n          onChange={(e) => {\n            setEndMovie(e.target.value);\n            fetchMovieSuggestions(e.target.value, setEndMovieSuggestions);\n          }}\n          placeholder=\"End Movie\"\n        />\n        {endMovieSuggestions.length > 0 && (\n          <ul className=\"suggestions\">\n            {endMovieSuggestions.map((movie) => (\n              <li\n                key={movie.id}\n                onClick={() =>\n                  handleSelectSuggestion(movie, setEndMovie, setEndMovieSuggestions, setEndMovieId)\n                }\n              >\n                <strong>{movie.title}</strong> ({movie.year})\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n\n      {/* Algorithm Selection */}\n      <div className=\"algorithm-selection\">\n        <label>Select Algorithm:</label>\n        <select value={algorithm} onChange={(e) => setAlgorithm(e.target.value)}>\n          <option value=\"dijkstra\">Dijkstra's Algorithm</option>\n          <option value=\"bfs\">Bidirectional BFS</option>\n        </select>\n      </div>\n\n      <button onClick={searchMovies} disabled={isProcessing}>\n        {isProcessing ? 'Searching...' : 'Find Path'}\n      </button>\n\n      {error && <p className=\"error\">{error}</p>}\n\n      {/* Loading Indicator */}\n      {isProcessing ? (\n        <div className=\"loading\">\n          <p>Processing movies... Please wait.</p>\n        </div>\n      ) : (\n        executionTime && (\n          <div className=\"loading\">\n            <p>\n              {lastExecutedAlgorithm === 'dijkstra'\n                ? \"Dijkstra's Execution Time\"\n                : 'Bidirectional BFS Execution Time'}\n              : {executionTime.toFixed(2)} seconds\n            </p>\n          </div>\n        )\n      )}\n\n      {/* Display Path */}\n      {path && (\n        <div>\n          <h2>{lastExecutedAlgorithm === 'dijkstra' ? \"Dijkstra's\" : 'Bidirectional BFS'} Path:</h2>\n          <ul>\n            {path.movies.map((movie, index) => (\n              <li key={movie.id}>\n                <p>\n                  {movie.title} ({movie.year})\n                  {index < path.connections.length && (\n                    <span> Connected via: {path.connections[index]}</span>\n                  )}\n                </p>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n\n      {/* Show Processed Movies and Graph Button */}\n      {topProcessedMovies.length > 0 && (\n        <>\n          <h2>Processed Movies:</h2>\n          <MovieCardDeck movies={topProcessedMovies} startMovieId={startMovieId} endMovieId={endMovieId} />\n          <button onClick={() => setCurrentPage('graph')}>View Interactive Graph</button>\n        </>\n      )}\n\n      {isLoadingMore && <p>Loading more processed movies...</p>}\n    </div>\n  );\n\n  return (\n    <div className=\"container\">\n      {currentPage === 'home' ? (\n        renderHomePage()\n      ) : (\n        <GraphPage\n          navigateHome={() => setCurrentPage('home')}\n          fullPath={fullPath}\n          processedMovies={processedMovies}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}