{"ast":null,"code":"var _jsxFileName = \"/Users/lucasperez/GitHub/IMDBSpeedrunGame/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './styles.css';\nimport MovieCardDeck from './MovieCardDeck';\nimport GraphPage from './GraphPage';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentPage, setCurrentPage] = useState('home');\n  const [startMovie, setStartMovie] = useState('');\n  const [endMovie, setEndMovie] = useState('');\n  const [algorithm, setAlgorithm] = useState('dijkstra');\n  const [startMovieSuggestions, setStartMovieSuggestions] = useState([]);\n  const [endMovieSuggestions, setEndMovieSuggestions] = useState([]);\n  const [path, setPath] = useState(null);\n  const [fullPath, setFullPath] = useState([]);\n  const [processedMovies, setProcessedMovies] = useState([]);\n  const [topProcessedMovies, setTopProcessedMovies] = useState([]);\n  const [startMovieId, setStartMovieId] = useState(null);\n  const [endMovieId, setEndMovieId] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Fetch movie suggestions\n  const fetchMovieSuggestions = async (query, setSuggestions) => {\n    if (query.length > 2) {\n      try {\n        const res = await axios.get(`/search_movie?movie_name=${encodeURIComponent(query)}`);\n        setSuggestions(res.data.results || []);\n      } catch (err) {\n        console.error('Error fetching movie suggestions:', err);\n        setSuggestions([]);\n      }\n    } else {\n      setSuggestions([]);\n    }\n  };\n  const handleSelectSuggestion = (movie, setMovie, setSuggestions, setMovieId) => {\n    setMovie(movie.title);\n    setMovieId(movie.id);\n    setSuggestions([]);\n  };\n\n  // Search for the path using the selected algorithm\n  const searchMovies = async () => {\n    if (!startMovie || !endMovie) {\n      setError('Please select both start and end movies.');\n      return;\n    }\n    if (!startMovieId || !endMovieId) {\n      setError('Invalid movie selections. Please try again.');\n      return;\n    }\n    setIsProcessing(true);\n    setError(null);\n    setPath(null);\n    setFullPath([]);\n    setProcessedMovies([]);\n    setTopProcessedMovies([]);\n    try {\n      const res = await axios.get(`/find_path?start_id=${startMovieId}&end_id=${endMovieId}&algorithm=${algorithm}`);\n      const algorithmPath = res.data.path;\n      if (algorithmPath) {\n        setPath(algorithmPath);\n        setFullPath(algorithmPath.movies);\n        fetchProcessedMoviesProgressively(); // Start fetching processed movies dynamically\n        fetchAllProcessedMovies();\n      }\n    } catch (err) {\n      console.error('Error finding path:', err);\n      setError('Unable to find a path between the selected movies.');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  // Fetch all processed movies progressively\n  const fetchAllProcessedMovies = async () => {\n    try {\n      let offset = 0;\n      const batchSize = 250;\n      const fetchBatch = async () => {\n        setIsLoadingMore(true); // Show loading indicator\n        const res = await axios.get(`/get_processed_movies?offset=${offset}&limit=${batchSize}`);\n        const newMovies = res.data.processed_movies;\n        if (newMovies && newMovies.length > 0) {\n          setProcessedMovies(prevMovies => [...prevMovies, ...newMovies]);\n          offset += newMovies.length;\n          if (offset < res.data.total_count) {\n            setTimeout(fetchBatch, 100); // Fetch next batch\n          } else {\n            setIsLoadingMore(false); // Stop loading once all movies are fetched\n          }\n        } else {\n          setIsLoadingMore(false); // Stop loading if no more movies\n        }\n      };\n      await fetchBatch();\n    } catch (err) {\n      console.error('Error fetching all processed movies:', err);\n      setIsLoadingMore(false);\n    }\n  };\n\n  // Fetch processed movies progressively\n  const fetchProcessedMoviesProgressively = async () => {\n    try {\n      let offset = 0;\n      const batchSize = 250;\n      const maxMovies = 500;\n      const fetchBatch = async () => {\n        setIsLoadingMore(true);\n        const res = await axios.get(`/get_processed_movies?offset=${offset}&limit=${batchSize}`);\n        const newMovies = res.data.processed_movies;\n        if (newMovies && newMovies.length > 0) {\n          setProcessedMovies(prevMovies => [...prevMovies, ...newMovies]);\n          setTopProcessedMovies(prevMovies => {\n            const updatedMovies = [...prevMovies, ...newMovies];\n            return updatedMovies.slice(0, 250); // Keep the top 250 movies\n          });\n          offset += newMovies.length;\n          if (offset < Math.min(res.data.total_count, maxMovies)) {\n            setTimeout(fetchBatch, 100); // Continue fetching next batch\n          } else {\n            setIsLoadingMore(false);\n          }\n        } else {\n          setIsLoadingMore(false);\n        }\n      };\n      await fetchBatch();\n    } catch (err) {\n      console.error('Error fetching processed movies:', err);\n      setIsLoadingMore(false);\n    }\n  };\n\n  // Render the home page\n  const renderHomePage = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uD83C\\uDFAC Movie Path Finder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"autocomplete\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: startMovie,\n        onChange: e => {\n          setStartMovie(e.target.value);\n          fetchMovieSuggestions(e.target.value, setStartMovieSuggestions);\n        },\n        placeholder: \"Start Movie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), startMovieSuggestions.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"suggestions\",\n        children: startMovieSuggestions.map(movie => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => handleSelectSuggestion(movie, setStartMovie, setStartMovieSuggestions, setStartMovieId),\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: movie.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 17\n          }, this), \" (\", movie.year, \")\"]\n        }, movie.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"autocomplete\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: endMovie,\n        onChange: e => {\n          setEndMovie(e.target.value);\n          fetchMovieSuggestions(e.target.value, setEndMovieSuggestions);\n        },\n        placeholder: \"End Movie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), endMovieSuggestions.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"suggestions\",\n        children: endMovieSuggestions.map(movie => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => handleSelectSuggestion(movie, setEndMovie, setEndMovieSuggestions, setEndMovieId),\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: movie.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 17\n          }, this), \" (\", movie.year, \")\"]\n        }, movie.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"algorithm-selection\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Select Algorithm:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: algorithm,\n        onChange: e => setAlgorithm(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"dijkstra\",\n          children: \"Dijkstra's Algorithm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"bfs\",\n          children: \"Bidirectional BFS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: searchMovies,\n      disabled: isProcessing,\n      children: isProcessing ? 'Searching...' : 'Find Path'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 17\n    }, this), path && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [algorithm === 'dijkstra' ? \"Dijkstra's\" : 'Bidirectional BFS', \" Path:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: path.movies.map((movie, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [movie.title, \" (\", movie.year, \")\", index < path.connections.length && /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\" Connected via: \", path.connections[index]]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 17\n          }, this)\n        }, movie.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 9\n    }, this), topProcessedMovies.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Processed Movies:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MovieCardDeck, {\n        movies: topProcessedMovies,\n        startMovieId: startMovieId,\n        endMovieId: endMovieId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCurrentPage('graph'),\n        children: \"View Interactive Graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), isLoadingMore && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading more processed movies...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: currentPage === 'home' ? renderHomePage() : /*#__PURE__*/_jsxDEV(GraphPage, {\n      navigateHome: () => setCurrentPage('home'),\n      fullPath: fullPath,\n      processedMovies: processedMovies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 258,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"gex0Ttja7q7DRHU1Yv4H13h+zv0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","MovieCardDeck","GraphPage","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","currentPage","setCurrentPage","startMovie","setStartMovie","endMovie","setEndMovie","algorithm","setAlgorithm","startMovieSuggestions","setStartMovieSuggestions","endMovieSuggestions","setEndMovieSuggestions","path","setPath","fullPath","setFullPath","processedMovies","setProcessedMovies","topProcessedMovies","setTopProcessedMovies","startMovieId","setStartMovieId","endMovieId","setEndMovieId","isProcessing","setIsProcessing","isLoadingMore","setIsLoadingMore","error","setError","fetchMovieSuggestions","query","setSuggestions","length","res","get","encodeURIComponent","data","results","err","console","handleSelectSuggestion","movie","setMovie","setMovieId","title","id","searchMovies","algorithmPath","movies","fetchProcessedMoviesProgressively","fetchAllProcessedMovies","offset","batchSize","fetchBatch","newMovies","processed_movies","prevMovies","total_count","setTimeout","maxMovies","updatedMovies","slice","Math","min","renderHomePage","children","fileName","_jsxFileName","lineNumber","columnNumber","className","type","value","onChange","e","target","placeholder","map","onClick","year","disabled","index","connections","navigateHome","_c","$RefreshReg$"],"sources":["/Users/lucasperez/GitHub/IMDBSpeedrunGame/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './styles.css';\nimport MovieCardDeck from './MovieCardDeck';\nimport GraphPage from './GraphPage';\n\nfunction App() {\n  const [currentPage, setCurrentPage] = useState('home');\n  const [startMovie, setStartMovie] = useState('');\n  const [endMovie, setEndMovie] = useState('');\n  const [algorithm, setAlgorithm] = useState('dijkstra');\n  const [startMovieSuggestions, setStartMovieSuggestions] = useState([]);\n  const [endMovieSuggestions, setEndMovieSuggestions] = useState([]);\n  const [path, setPath] = useState(null);\n  const [fullPath, setFullPath] = useState([]);\n  const [processedMovies, setProcessedMovies] = useState([]);\n  const [topProcessedMovies, setTopProcessedMovies] = useState([]);\n  const [startMovieId, setStartMovieId] = useState(null);\n  const [endMovieId, setEndMovieId] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Fetch movie suggestions\n  const fetchMovieSuggestions = async (query, setSuggestions) => {\n    if (query.length > 2) {\n      try {\n        const res = await axios.get(`/search_movie?movie_name=${encodeURIComponent(query)}`);\n        setSuggestions(res.data.results || []);\n      } catch (err) {\n        console.error('Error fetching movie suggestions:', err);\n        setSuggestions([]);\n      }\n    } else {\n      setSuggestions([]);\n    }\n  };\n\n  const handleSelectSuggestion = (movie, setMovie, setSuggestions, setMovieId) => {\n    setMovie(movie.title);\n    setMovieId(movie.id);\n    setSuggestions([]);\n  };\n\n  // Search for the path using the selected algorithm\n  const searchMovies = async () => {\n    if (!startMovie || !endMovie) {\n      setError('Please select both start and end movies.');\n      return;\n    }\n\n    if (!startMovieId || !endMovieId) {\n      setError('Invalid movie selections. Please try again.');\n      return;\n    }\n\n    setIsProcessing(true);\n    setError(null);\n    setPath(null);\n    setFullPath([]);\n    setProcessedMovies([]);\n    setTopProcessedMovies([]);\n\n    try {\n      const res = await axios.get(`/find_path?start_id=${startMovieId}&end_id=${endMovieId}&algorithm=${algorithm}`);\n      const algorithmPath = res.data.path;\n\n      if (algorithmPath) {\n        setPath(algorithmPath);\n        setFullPath(algorithmPath.movies);\n        fetchProcessedMoviesProgressively(); // Start fetching processed movies dynamically\n        fetchAllProcessedMovies();\n      }\n    } catch (err) {\n      console.error('Error finding path:', err);\n      setError('Unable to find a path between the selected movies.');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  // Fetch all processed movies progressively\n  const fetchAllProcessedMovies = async () => {\n    try {\n      let offset = 0;\n      const batchSize = 250;\n\n      const fetchBatch = async () => {\n        setIsLoadingMore(true); // Show loading indicator\n        const res = await axios.get(`/get_processed_movies?offset=${offset}&limit=${batchSize}`);\n        const newMovies = res.data.processed_movies;\n\n        if (newMovies && newMovies.length > 0) {\n          setProcessedMovies((prevMovies) => [...prevMovies, ...newMovies]);\n          offset += newMovies.length;\n\n          if (offset < res.data.total_count) {\n            setTimeout(fetchBatch, 100); // Fetch next batch\n          } else {\n            setIsLoadingMore(false); // Stop loading once all movies are fetched\n          }\n        } else {\n          setIsLoadingMore(false); // Stop loading if no more movies\n        }\n      };\n\n      await fetchBatch();\n    } catch (err) {\n      console.error('Error fetching all processed movies:', err);\n      setIsLoadingMore(false);\n    }\n  };\n\n  // Fetch processed movies progressively\n  const fetchProcessedMoviesProgressively = async () => {\n    try {\n      let offset = 0;\n      const batchSize = 250;\n      const maxMovies = 500;\n\n      const fetchBatch = async () => {\n        setIsLoadingMore(true);\n        const res = await axios.get(`/get_processed_movies?offset=${offset}&limit=${batchSize}`);\n        const newMovies = res.data.processed_movies;\n\n        if (newMovies && newMovies.length > 0) {\n          setProcessedMovies((prevMovies) => [...prevMovies, ...newMovies]);\n          setTopProcessedMovies((prevMovies) => {\n            const updatedMovies = [...prevMovies, ...newMovies];\n            return updatedMovies.slice(0, 250); // Keep the top 250 movies\n          });\n          offset += newMovies.length;\n\n          if (offset < Math.min(res.data.total_count, maxMovies)) {\n            setTimeout(fetchBatch, 100); // Continue fetching next batch\n          } else {\n            setIsLoadingMore(false);\n          }\n        } else {\n          setIsLoadingMore(false);\n        }\n      };\n\n      await fetchBatch();\n    } catch (err) {\n      console.error('Error fetching processed movies:', err);\n      setIsLoadingMore(false);\n    }\n  };\n\n  // Render the home page\n  const renderHomePage = () => (\n    <div>\n      <h1>🎬 Movie Path Finder</h1>\n\n      {/* Start Movie Input */}\n      <div className=\"autocomplete\">\n        <input\n          type=\"text\"\n          value={startMovie}\n          onChange={(e) => {\n            setStartMovie(e.target.value);\n            fetchMovieSuggestions(e.target.value, setStartMovieSuggestions);\n          }}\n          placeholder=\"Start Movie\"\n        />\n        {startMovieSuggestions.length > 0 && (\n          <ul className=\"suggestions\">\n            {startMovieSuggestions.map((movie) => (\n              <li\n                key={movie.id}\n                onClick={() =>\n                  handleSelectSuggestion(movie, setStartMovie, setStartMovieSuggestions, setStartMovieId)\n                }\n              >\n                <strong>{movie.title}</strong> ({movie.year})\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n\n      {/* End Movie Input */}\n      <div className=\"autocomplete\">\n        <input\n          type=\"text\"\n          value={endMovie}\n          onChange={(e) => {\n            setEndMovie(e.target.value);\n            fetchMovieSuggestions(e.target.value, setEndMovieSuggestions);\n          }}\n          placeholder=\"End Movie\"\n        />\n        {endMovieSuggestions.length > 0 && (\n          <ul className=\"suggestions\">\n            {endMovieSuggestions.map((movie) => (\n              <li\n                key={movie.id}\n                onClick={() =>\n                  handleSelectSuggestion(movie, setEndMovie, setEndMovieSuggestions, setEndMovieId)\n                }\n              >\n                <strong>{movie.title}</strong> ({movie.year})\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n\n      {/* Algorithm Selection */}\n      <div className=\"algorithm-selection\">\n        <label>Select Algorithm:</label>\n        <select value={algorithm} onChange={(e) => setAlgorithm(e.target.value)}>\n          <option value=\"dijkstra\">Dijkstra's Algorithm</option>\n          <option value=\"bfs\">Bidirectional BFS</option>\n        </select>\n      </div>\n\n      <button onClick={searchMovies} disabled={isProcessing}>\n        {isProcessing ? 'Searching...' : 'Find Path'}\n      </button>\n\n      {error && <p className=\"error\">{error}</p>}\n\n      {/* Display Path */}\n      {path && (\n        <div>\n          <h2>{algorithm === 'dijkstra' ? \"Dijkstra's\" : 'Bidirectional BFS'} Path:</h2>\n          <ul>\n            {path.movies.map((movie, index) => (\n              <li key={movie.id}>\n                <p>\n                  {movie.title} ({movie.year})\n                  {index < path.connections.length && (\n                    <span> Connected via: {path.connections[index]}</span>\n                  )}\n                </p>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n\n      {/* Show Processed Movies and Graph Button */}\n      {topProcessedMovies.length > 0 && (\n        <>\n          <h2>Processed Movies:</h2>\n          <MovieCardDeck movies={topProcessedMovies} startMovieId={startMovieId} endMovieId={endMovieId} />\n          <button onClick={() => setCurrentPage('graph')}>View Interactive Graph</button>\n        </>\n      )}\n\n      {isLoadingMore && <p>Loading more processed movies...</p>}\n    </div>\n  );\n\n  return (\n    <div className=\"container\">\n      {currentPage === 'home' ? (\n        renderHomePage()\n      ) : (\n        <GraphPage\n          navigateHome={() => setCurrentPage('home')}\n          fullPath={fullPath}\n          processedMovies={processedMovies}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}